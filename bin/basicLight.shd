@shader shared
#version 330 core

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

@shader vertex
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec4 _unused0;
layout (location = 3) in vec2 aTexCoord;

out vec3 RawNormal;
out vec3 FragPos;
out vec2 TexCoord;

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    RawNormal = aNormal;
    TexCoord = vec2(aTexCoord.x, 1.0 - aTexCoord.y);
    gl_Position = projection * view * model * vec4(aPos, 1.0f);
}

@shader fragment
out vec4 FragColor;

in vec3 RawNormal;
in vec3 FragPos;
in vec2 TexCoord;

uniform vec3 lightPos;
uniform float ambientStrength;
uniform vec3 ambientColor;
uniform vec3 viewPos;

uniform sampler2D texture0;
uniform sampler2D spec0;

float specularStrength = 0.5f;

void main()
{
    vec3 modelNormal = mat3(transpose(inverse(model))) * RawNormal;
    vec3 norm = normalize(modelNormal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = vec3(diff);

    vec3 viewDir = normalize(FragPos - viewPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = vec3(specularStrength * spec) * vec3(texture(spec0, TexCoord));

    vec3 shading = (ambientColor * ambientStrength) + diffuse + specular;
    // vec3 shading = specular;
    FragColor = texture(texture0, TexCoord) * vec4(shading, 1.0);
    // FragColor = vec4(specular, 1.0);
    //FragColor = vec4(TexCoord, 0.0, 1.0);
    //FragColor = vec4(FragPos, 1.0);
}